import { Router } from '@angular/router';
import { ApiMethod } from './../enums/api-method';
import { ApiEndPoints } from '../enums/api-endpoints';
import { GlobalSettings } from './../globalsettings';
import { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError } from 'rxjs/operators';
import { Observable, of, throwError } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class HttpService {

  constructor(private _http: HttpClient, private _router: Router) { }

  requestCall(endpoint: ApiEndPoints, method: ApiMethod, data?: any) {
    // Define response as the result of any API call
    let response;

    // Generate the API call based on the input provided
    switch(method) {
      case ApiMethod.GET:
        response = this._http.get(GlobalSettings['ApiServer'] + endpoint, data)
          .pipe(catchError((err) => this.handleError(err)));
        break;
      case ApiMethod.POST:
        response = this._http.post(GlobalSettings['ApiServer'] + endpoint, data)
          .pipe(catchError((err) => this.handleError(err)));
        break;
      case ApiMethod.PUT:
        response = this._http.put(GlobalSettings['ApiServer'] + endpoint, data)
          .pipe(catchError((err) => this.handleError(err)));
        break;
      case ApiMethod.DELETE:
        response = this._http.delete(GlobalSettings['ApiServer'] + endpoint, data)
          .pipe(catchError((err) => this.handleError(err)));
        break;
    }
    
    // Return response to calling method
    return response;
  }

  private handleError(error: HttpErrorResponse) : Observable<any> {
    
    let isHandled = false;

    // If error is generated by UI, log event and proceed (network connections issues, ... caused by UI service when generating the request)
    if (error.error instanceof ErrorEvent) {
      console.error("The UI Service could not generate the API call");
    }

    // Handle error based on response status code
    else {
      console.log(`An error occured during an API call. Status code: ${error.status} - ${error.statusText}`);

      switch (error.status) {
        case 400:     // Bad Request
          console.log("Request content incorrect. Rethrow error to be handled by requesting service");
          break;
        case 401:     // Unauthorized
          console.log("Unauthorized request. Redirect to login page");
          this._router.navigate(["/authentication/login"], { queryParams: { returnUrl: this._router.url}});
          isHandled = true;
          break;
        case 403:     // Forbidden
          console.log("Access had been denied. Redirect to notification page");
          this._router.navigate(["/error/forbidden"], { queryParams: { returnUrl: this._router.url }});
          isHandled = true;
          break;
        case 500:     // Server error
          console.log(`Returned error message: ${error.error.message}`);
          console.log("A server error occurred, request could not be processed. Redirect to generic error page.");
          this._router.navigateByUrl("/error/servererror");
          isHandled = true;
          break;
        default:      // All other error messages
          console.log("An unhandled error occurred. Rethrowing error...");
          break;
      }
    }

    if (isHandled) {
      return of(error);
    }
    else {
      return throwError(error);
    }
  }

}
